geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
# scale_size_continuous(range=c(0.5,8)) +
# scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
# Make the graph
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(0.5,3)) +
# scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
# Make the graph
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(1,3)) +
# scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
# Make the graph
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(1,9)) +
# scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
# Make the graph
ggraph(mygraph, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) +
scale_size_continuous(range=c(1,5)) +
# scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
coonect
temp
from = unique(temp$name)
to = from
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
mygraph <- graph_from_data_frame( connect, vertices = temp, directed = T)
from = unique(temp$name)
connect
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = .5) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
temp
unique(station$station)
length(unique(station$station))
d1 <- data.frame(from="origin", to = unique(station$district))
d2 <- data.frame(from=rep(d1$to, each=108), to=unique(station$station))
hierarchy <- rbind(d1, d2)
d1
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) )
mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
# With igraph:
plot(mygraph, vertex.label="", edge.arrow.size=0, vertex.size=2)
station %>%
dplyr::group_by(station) %>%
dplyr::summarise(n = n()) %>%
merge(station, by = 'station') %>%
dplyr::select(district, station, n) %>%
dplyr::rename(grp = district,
name = station) %>%
dplyr::distinct()
station %>%
dplyr::group_by(station) %>%
dplyr::summarise(n = n()) %>%
merge(station, by = 'station') %>%
dplyr::select(district, station, n) %>%
dplyr::rename(from = district,
to = station) %>%
dplyr::distinct()
d2 <- station %>%
dplyr::select(district, name) %>%
distinct() %>%
dplyr::rename(from = district,
to = name)
head(station)
d2 <- station %>%
dplyr::select(district, station) %>%
distinct() %>%
dplyr::rename(from = district,
to = station)
hierarchy <- rbind(d1, d2)
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) )
mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
# With igraph:
plot(mygraph, vertex.label="", edge.arrow.size=0, vertex.size=2)
# With ggraph:
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_link() +
theme_void()
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal() +
theme_void()
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal(alpha=0.1) +
geom_conn_bundle(data = get_con(from = c(18,20,30), to = c(19, 50, 70)), alpha=1, width=1, colour="skyblue", tension = 0) +
theme_void()
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal(alpha=0.1) +
geom_conn_bundle(data = get_con(from = c(18,20,30), to = c(19, 50, 70)), alpha=1, width=1, colour="skyblue", tension = 1) +
theme_void()
# Libraries
library(ggraph)
library(igraph)
# create a data frame giving the hierarchical structure of your individuals.
# Origin on top, then groups, then subgroups
d1 <- data.frame(from="origin", to=paste("group", seq(1,10), sep=""))
d2 <- data.frame(from=rep(d1$to, each=10), to=paste("subgroup", seq(1,100), sep="_"))
hierarchy <- rbind(d1, d2)
# create a vertices data.frame. One line per object of our hierarchy, giving features of nodes.
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) )
mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
# create a dataframe with connection between leaves (individuals)
all_leaves <- paste("subgroup", seq(1,100), sep="_")
connect <- rbind(
data.frame( from=sample(all_leaves, 100, replace=T) , to=sample(all_leaves, 100, replace=T)),
data.frame( from=sample(head(all_leaves), 30, replace=T) , to=sample( tail(all_leaves), 30, replace=T)),
data.frame( from=sample(all_leaves[25:30], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)),
data.frame( from=sample(all_leaves[75:80], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T))
)
# The connection object must refer to the ids of the leaves:
from <- match( connect$from, vertices$name)
to <- match( connect$to, vertices$name)
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
gc9
gc()
head(connect)
from
to
head(data)
connect = data %>%
dplyr::filter(type == 'On' & hour == 6) %>%
dplyr::group_by(from, to) %>%
dplyr::summarise(number = sum(number))
head(connect)
View(connect)
connect = connect%>%
dplyr::filter(number > 0) %>%
dplyr::select(-number)
from <- match( connect$from, vertices$name)
to <- match( connect$to, vertices$name)
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
d1 <- data.frame(from="origin", to = unique(station$district))
d2 <- station %>%
dplyr::select(district, station) %>%
distinct() %>%
dplyr::rename(from = district,
to = station)
hierarchy <- rbind(d1, d2)
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) )
mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
# With igraph:
plot(mygraph, vertex.label="", edge.arrow.size=0, vertex.size=2)
# With ggraph:
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_link() +
theme_void()
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal() +
theme_void()
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
from
vertices
connect$from
match( connect$from, vertices$name)
match( connect$to, vertices$name)
from <- match( connect$from, vertices$name)
to <- match( connect$to, vertices$name)
from
to
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
d1 <- data.frame(from="origin", to = unique(station$district))
d2 <- station %>%
dplyr::select(district, station) %>%
distinct() %>%
dplyr::rename(from = district,
to = station)
hierarchy <- rbind(d1, d2)
vertices <- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) )
mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
# With igraph:
plot(mygraph, vertex.label="", edge.arrow.size=0, vertex.size=2)
# With ggraph:
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_link() +
theme_void()
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal() +
theme_void()
connect = data %>%
dplyr::filter(type == 'On' & hour == 6) %>%
dplyr::group_by(from, to) %>%
dplyr::summarise(number = sum(number)) %>%
dplyr::filter(number > 0) %>%
dplyr::select(-number)
from <- match( connect$from, vertices$name)
to <- match( connect$to, vertices$name)
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
# geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
# geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
# geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
get_con(from = from, to = to)
gc()
connect$from = ifelse(connect$from == '大橋頭站', '大橋頭', connect$from)
connect$to = ifelse(connect$to == '大橋頭站', '大橋頭', connect$to)
from <- match( connect$from, vertices$name)
to <- match( connect$to, vertices$name)
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
connect
connect = data %>%
dplyr::filter(type == 'On' & hour == 6) %>%
dplyr::group_by(from, to) %>%
dplyr::summarise(number = sum(number))
View(connect)
sum(connect$from >= 5000)
sum(connect$from >= 10000)
sum(connect$number >= 10000)
sum(connect$number >= 5000)
connect = connect %>%   dplyr::filter(number > 5000) %>%
dplyr::select(-number)
connect$from = ifelse(connect$from == '大橋頭站', '大橋頭', connect$from)
connect$to = ifelse(connect$to == '大橋頭站', '大橋頭', connect$to)
from <- match( connect$from, vertices$name)
to <- match( connect$to, vertices$name)
# plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", tension = 0.9) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
theme_void()
gc()
rm(list = setdiff(ls(),'data'))
station = read.csv('https://raw.githubusercontent.com/repeat/northern-taiwan-metro-stations/master/northern-taiwan.csv') %>%
dplyr::rename(line = line_name,
station = station_name_tw) %>%
dplyr::mutate(district = str_sub(address, 4, 6)) %>%
dplyr::select(line, station, district) %>%
dplyr::filter(line != '環狀線' & line != '機場線')
transfer = station %>%
dplyr::group_by(station) %>%
count() %>%
dplyr::filter(n > 1)
station$line = ifelse(station$station %in% transfer$station, '轉乘站', station$line)
cols <- c("文湖線" = '#c48c31', "淡水信義線" = '#e3002c', "松山新店線" = '#008659',
"中和新蘆線" = '#f8b61c', "板南線" = '#0070bd', '轉乘站' = 'black')
ggplot(station) +
geom_point(aes(x = lon, y = lat, col = line)) +
scale_color_manual(values = cols) +
theme(legend.position = 'None',
panel.grid.minor = element_blank())
station
#
temp = data %>%
pivot_longer(cols = c('from', 'to'),
names_to = 'direction',
values_to = 'station') %>%
dplyr::group_by(date, station, direction, type) %>%
dplyr::summarise(number = sum(number))
temp$station = fct_reorder(temp$station, temp$number, .fun = max)
temp %>%
dplyr::filter(station %in% transfer$station) %>%
ggplot() +
geom_boxplot(aes(x = station, y = number, color = type), position = 'dodge') +
facet_wrap(~direction, ncol = 1) +
theme(panel.grid.minor = element_blank())
gc()
gc()
# 總運量排名
temp = data %>%
pivot_longer(cols = c('from', 'to'),
names_to = 'direction',
values_to = 'station') %>%
dplyr::group_by(station, direction) %>%
dplyr::summarise(number = sum(number)) %>%
merge(station, by = 'station')
temp$station = fct_reorder(temp$station, abs(temp$number))
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank())
range(temp$number)
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_x_continuous(trans = function(x)x / 10000) +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank())
temp$number  =temp$number / 10000
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank())
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free_y') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
temp
head(temp)
temp %>% dplyr::select(station, direction, number) %>% tidyr::pivot_wider(id_cols = 'station', names_from = 'direction', values_from = 'number')
temp %>%
dplyr::select(station, direction, number) %>%
tidyr::pivot_wider(id_cols = 'station', names_from = 'direction', values_from = 'number')
temp %>%
dplyr::select(station, direction, number) %>%
tidyr::pivot_wider(id_cols = 'station', names_from = 'direction', values_from = 'number') %>%
head()
temp
temp[temp$station == '台北車站', ]
station
station
station[station$station == '台北車站', ]
station = read.csv('https://raw.githubusercontent.com/repeat/northern-taiwan-metro-stations/master/northern-taiwan.csv') %>%
dplyr::rename(line = line_name,
station = station_name_tw) %>%
dplyr::mutate(district = str_sub(address, 4, 6)) %>%
dplyr::select(line, station, district) %>%
dplyr::filter(line != '環狀線' & line != '機場線') %>%
distinct()
View(station)
length(unique(station$station))
transfer = station %>%
dplyr::group_by(station) %>%
count() %>%
dplyr::filter(n > 1)
station$line = ifelse(station$station %in% transfer$station, '轉乘站', station$line)
# 總運量排名
temp = data %>%
pivot_longer(cols = c('from', 'to'),
names_to = 'direction',
values_to = 'station') %>%
dplyr::group_by(station, direction) %>%
dplyr::summarise(number = sum(number) / 10000) %>%
merge(station, by = 'station')
temp$station = fct_reorder(temp$station, abs(temp$number))
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_pointrange(aes(y = station, xmin = , xmax = )) +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
# geom_pointrange(aes(y = station, xmin = , xmax = )) +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
gc()
station[station$station == '台北車站', ]
read.csv('https://raw.githubusercontent.com/repeat/northern-taiwan-metro-stations/master/northern-taiwan.csv') %>%
dplyr::rename(line = line_name,
station = station_name_tw) %>%
dplyr::mutate(district = str_sub(address, 4, 6)) %>%
dplyr::select(line, station, district) %>%
dplyr::filter(line != '環狀線' & line != '機場線')
read.csv('https://raw.githubusercontent.com/repeat/northern-taiwan-metro-stations/master/northern-taiwan.csv') %>%
dplyr::rename(line = line_name,
station = station_name_tw) %>%
dplyr::mutate(district = str_sub(address, 4, 6)) %>%
dplyr::select(line, station, district) %>%
dplyr::filter(line != '環狀線' & line != '機場線') %>% arrange(station)
read.csv('https://raw.githubusercontent.com/repeat/northern-taiwan-metro-stations/master/northern-taiwan.csv') %>%
dplyr::rename(line = line_name,
station = station_name_tw) %>%
dplyr::mutate(district = str_sub(address, 4, 6)) %>%
dplyr::select(line, station, district) %>%
dplyr::filter(line != '環狀線' & line != '機場線') %>%
arrange(station) %>%
distinct()
station %>% dplyr::select(-line) %>% unique()
station %>% dplyr::select(-line) %>% distinct()
# 總運量排名
temp = data %>%
pivot_longer(cols = c('from', 'to'),
names_to = 'direction',
values_to = 'station') %>%
dplyr::group_by(station, direction) %>%
dplyr::summarise(number = sum(number) / 10000) %>%
merge(station %>% dplyr::select(-line) %>% distinct(), by = 'station')
temp$station = fct_reorder(temp$station, abs(temp$number))
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
# geom_pointrange(aes(y = station, xmin = , xmax = )) +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
# geom_pointrange(aes(y = station, xmin = , xmax = )) +
scale_color_brewer(palette = 'Set1') +
# facet_wrap(~line, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
temp
ggplot() +
geom_point(data = temp %>% dplyr::filter(direction == 'from'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
geom_point(data = temp %>% dplyr::filter(direction == 'to'), aes(x = number, y = station, col = direction), stat = 'identity', position = 'stack') +
# geom_pointrange(aes(y = station, xmin = , xmax = )) +
scale_color_brewer(palette = 'Set1') +
facet_wrap(~district, scales = 'free') +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
gc()
